USE PRATAP_EMPLOYEE
CREATE TABLE Products
(
NAME VARCHAR(50) NOT NULL,
PRICE INT NOT NULL,
TOTAL_STOCK INT  NOT NULL
)

INSERT INTO PRODUCTS(NAME,PRICE,TOTAL_STOCK)VALUES('PEN',200,100)
INSERT INTO PRODUCTS(NAME,PRICE,TOTAL_STOCK)VALUES('PENCIL',10,300)
INSERT INTO PRODUCTS(NAME,PRICE,TOTAL_STOCK)VALUES('DOLL',2000,0)
INSERT INTO PRODUCTS(NAME,PRICE,TOTAL_STOCK)VALUES('BALL',20,180)

ALTER TABLE PRODUCTS ADD ID INT NOT NULL IDENTITY(101,1)
ALTER TABLE PRODUCTS ADD PRIMARY KEY(ID)
SELECT * FROM PRODUCTS




CREATE TABLE CUSTOMERS
(
NAME VARCHAR(50) NOT NULL,
ADDRESS VARCHAR(23) NOT NULL
)
INSERT INTO CUSTOMERS(NAME,ADDRESS)VALUES('SAI','ONGOLE')
INSERT INTO CUSTOMERS(NAME,ADDRESS)VALUES('PRATAP','CHENNAI')
INSERT INTO CUSTOMERS(NAME,ADDRESS)VALUES('VASU','CHENNAI')
INSERT INTO CUSTOMERS(NAME,ADDRESS)VALUES('ADHI','GUNTUR')
ALTER TABLE CUSTOMERS ADD ID INT NOT NULL IDENTITY(101,1)
ALTER TABLE CUSTOMERS ADD PRIMARY KEY(ID)
SELECT * FROM CUSTOMERS

CREATE TABLE ORDERS
(
CUSTOMERID INT NOT NULL,
PRODUCTID INT NOT NULL,
QTY INT  NOT NULL,
AMOUNT INT  NOT NULL,
DELIVERYSTATUS VARCHAR(100)
)
ALTER TABLE ORDERS ADD ID INT NOT NULL IDENTITY(101,1)
INSERT INTO ORDERS(CUSTOMERID,PRODUCTID,QTY,AMOUNT,DELIVERYSTATUS)VALUES(101,101,2,100,'PENDING')
INSERT INTO ORDERS(CUSTOMERID,PRODUCTID,QTY,AMOUNT,DELIVERYSTATUS)VALUES(102,102,4,8000,'DELIVERED')
INSERT INTO ORDERS(CUSTOMERID,PRODUCTID,QTY,AMOUNT,DELIVERYSTATUS)VALUES(101,101,6,800,'OUT FOR DELIVERY')
INSERT INTO ORDERS(CUSTOMERID,PRODUCTID,QTY,AMOUNT,DELIVERYSTATUS)VALUES(103,104,3,1000,'PENDING')

ALTER TABLE ORDERS ADD CONSTRAINT F1 FOREIGN KEY(PRODUCTID) REFERENCES PRODUCTS(ID)
ALTER TABLE ORDERS ADD CONSTRAINT F2 FOREIGN KEY(CUSTOMERID) REFERENCES CUSTOMERS(ID)


SELECT * FROM PRODUCTS
--UPDATE (DML COMMAND)
UPDATE CUSTOMERS
SET NAME='HARI',
ADDRESS='HYDERBAD' WHERE ID=102;


(NAME,PRICE,TOTAL_STOCK)VALUES('PEN',200,100)
UPDATE Products
SET PRICE=(200-(200*10/100))
WHERE NAME='PEN';
SELECT * FROM Products


SELECT * FROM CUSTOMERS


SELECT Products.Name,Products.ID,COUNT(Orders.ID) AS total_orders FROM Products
LEFT JOIN Orders ON Products.ID=Orders.productId
GROUP BY Products.ID,Products.Name

SELECT Products.Name,Products.ID,COUNT(Orders.ID) AS total_orders FROM Products
LEFT JOIN Orders ON Products.ID=Orders.productId
GROUP BY Products.ID,Products.Name
having Count(orders.id)=0

SELECT * FROM ORDERS

--UPDATE (DML COMMAND)
UPDATE CUSTOMERS
SET NAME='HARI',
ADDRESS='HYDERBAD' WHERE ID=102;

SELECT * FROM CUSTOMERS C
JOIN ORDERS O ON C.ID=O.CUSTOMERID
WHERE C.ADDRESS LIKE 'CHENNAI%';

UPDATE O SET O.DELIVERYSTATUS='DELIVERED'
FROM  CUSTOMERS C
JOIN ORDERS O ON C.ID=O.CUSTOMERID
WHERE C.ADDRESS LIKE 'CHENNAI%';


UPDATE Products
SET PRICE=(200-(200*10/100))
WHERE NAME='PEN';

update  O 
set o.AMOUNT=O.Amount-(0.1*O.AMOUNT)
from Products P
Join Orders O on P.id=O.ProductId Where  QTY>=2


select * from Products P
Join Orders O on P.id=O.ProductId Where  QTY>=2

DELETE CUSTOMERS WHERE NAME='SAI';


select * from CUSTOMERS
--WE CAN USE 
--BEGIN TRAN T1
BEGIN TRANSACTION T1
UPDATE ORDERS 
SET DELIVERYSTATUS='PENDING'
WHERE CUSTOMERID=101

ROLLBACK TRAN T1
COMMIT TRAN T1
SELECT * FROM ORDERS

CREATE VIEW ORDER_DETAILS AS
SELECT C.ID,O.ID AS ORDERID,C.NAME,O.DELIVERYSTATUS FROM CUSTOMERS C
JOIN ORDERS O ON CUSTOMERID=C.ID JOIN PRODUCTS P ON P.ID=O.PRODUCTID

SELECT * FROM ORDER_DETAILS;